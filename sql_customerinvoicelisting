<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Invoice Data Extractor</title>
  
  <!-- Tailwind CSS for styling -->
  <script src="https://cdn.tailwindcss.com"></script>
  
  <!-- React and ReactDOM -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
  
  <!-- Babel for JSX -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  
  <!-- XLSX library for Excel file processing -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  
  <!-- Lodash for utility functions -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
</head>
<body>
  <div id="root"></div>
  
  <script type="text/babel">
    const { useState, useEffect } = React;
    
    const InvoiceExtractor = () => {
      const [file, setFile] = useState(null);
      const [fileName, setFileName] = useState("");
      const [processing, setProcessing] = useState(false);
      const [invoices, setInvoices] = useState([]);
      const [error, setError] = useState(null);
      const [filterText, setFilterText] = useState("");
      const [sortConfig, setSortConfig] = useState({ key: 'groupNo', direction: 'ascending' });
      const [totalInvoiceGroups, setTotalInvoiceGroups] = useState(0);
      const [totalInvoiceItems, setTotalInvoiceItems] = useState(0);
      const [currentPage, setCurrentPage] = useState(1);
      const [itemsPerPage, setItemsPerPage] = useState(25);
      const [showCopyModal, setShowCopyModal] = useState(false);

      // Process the uploaded file
      const processFile = async (uploadedFile) => {
        setProcessing(true);
        setError(null);
        
        try {
          // Read the file
          const fileData = await readFileAsArrayBuffer(uploadedFile);
          
          // Parse the Excel data
          const workbook = XLSX.read(fileData, {
            type: 'array',
            cellDates: true
          });
          
          // Get the first sheet
          const firstSheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[firstSheetName];
          
          // Convert to JSON for processing
          const jsonData = XLSX.utils.sheet_to_json(worksheet, {
            header: 1,
            defval: '',
            raw: false
          });
          
          // Extract invoice data
          const extractedInvoices = extractInvoices(jsonData);
          
          // Update state with results
          setInvoices(extractedInvoices);
          setTotalInvoiceGroups(new Set(extractedInvoices.map(inv => inv.groupNo)).size);
          setTotalInvoiceItems(extractedInvoices.length);
          
        } catch (err) {
          console.error('Error processing file:', err);
          setError("Error processing file: " + err.message);
        } finally {
          setProcessing(false);
        }
      };
      
      // Function to read file as ArrayBuffer
      const readFileAsArrayBuffer = (file) => {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          
          reader.onload = (e) => {
            resolve(e.target.result);
          };
          
          reader.onerror = (e) => {
            reject(new Error('Error reading file'));
          };
          
          reader.readAsArrayBuffer(file);
        });
      };
      
      // Function to extract invoice data from the JSON
      const extractInvoices = (data) => {
        const invoices = [];
        let currentInvoice = null;
        let groupCounter = 1;
        
        // Start from row 14 (based on the sample file structure)
        for (let i = 14; i < data.length; i++) {
          const row = data[i];
          
          // Skip empty rows
          if (!row.length || !row.some(cell => String(cell).trim())) {
            continue;
          }
          
          // Check if this row contains a date in the first column and a name in the third column
          // This indicates a new invoice header
          const firstCell = String(row[0] || '').trim();
          const hasDate = firstCell.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/);
          const hasName = row[2] && String(row[2]).trim().length > 0;
          
          if (hasDate && hasName) {
            // This is a new invoice header
            currentInvoice = {
              docDate: row[0],
              name: String(row[2]).trim(),
              accountDescription: row[8],
            };
            groupCounter++;
          } 
          // Check if this row contains item details (Seq, GL Code, etc.)
          else if (row[0] && row[1] && 
                  String(row[0]).trim() !== 'Seq' && 
                  !isNaN(parseInt(String(row[0]).trim()))) {
            
            // This is an item row
            if (currentInvoice) {
              const item = {
                groupNo: groupCounter - 1,
                docDate: currentInvoice.docDate,
                name: currentInvoice.name,
                accountDescription: currentInvoice.accountDescription || '----',
                seq: row[0],
                glCode: row[1],
                description: row[3],
                project: row[8] || '----',
                quantity: row[10],
                uom: row[11],
                unitPrice: row[12],
                amount: row[13]
              };
              
              invoices.push(item);
            }
          }
        }
        
        return invoices;
      };
      
      // Handle file upload
      const handleFileUpload = (e) => {
        const uploadedFile = e.target.files[0];
        if (uploadedFile) {
          setFile(uploadedFile);
          setFileName(uploadedFile.name);
          processFile(uploadedFile);
        }
      };
      
      // Handle sorting
      const requestSort = (key) => {
        let direction = 'ascending';
        if (sortConfig.key === key && sortConfig.direction === 'ascending') {
          direction = 'descending';
        }
        setSortConfig({ key, direction });
      };
      
      // Get sorted and filtered data
      const getSortedData = () => {
        let filteredData = [...invoices];
        
        // Apply text filtering
        if (filterText) {
          const searchTerm = filterText.toLowerCase();
          filteredData = filteredData.filter(item => 
            String(item.name).toLowerCase().includes(searchTerm) ||
            String(item.description).toLowerCase().includes(searchTerm) ||
            String(item.glCode).toLowerCase().includes(searchTerm) ||
            String(item.docDate).toLowerCase().includes(searchTerm)
          );
        }
        
        // Apply sorting
        filteredData.sort((a, b) => {
          if (a[sortConfig.key] < b[sortConfig.key]) {
            return sortConfig.direction === 'ascending' ? -1 : 1;
          }
          if (a[sortConfig.key] > b[sortConfig.key]) {
            return sortConfig.direction === 'ascending' ? 1 : -1;
          }
          return 0;
        });
        
        return filteredData;
      };
      
      // Open modal to copy data
      const openCopyModal = () => {
        if (invoices.length === 0) return;
        setShowCopyModal(true);
      };
      
      // Generate tab-delimited text for copying
      const generateCopyText = () => {
        // Create header row
        const headers = [
          'GroupNo', 'Doc Date', 'Name', 'Account Description', 
          'Seq', 'GL Code', 'Description', 'Project', 
          'Quantity', 'UOM', 'Unit Price', 'Amount'
        ].join('\t');
        
        // Create data rows
        const dataRows = invoices.map(item => [
          item.groupNo,
          item.docDate,
          item.name,
          item.accountDescription,
          item.seq,
          item.glCode,
          item.description,
          item.project,
          item.quantity,
          item.uom,
          item.unitPrice,
          item.amount
        ].join('\t'));
        
        // Combine headers and data
        return [headers, ...dataRows].join('\n');
      };
      
      // Helper function to generate page numbers for pagination
      const generatePageNumbers = () => {
        const sortedData = getSortedData();
        const totalPages = Math.ceil(sortedData.length / itemsPerPage);
        
        // Show max 5 page buttons
        if (totalPages <= 5) {
          return Array.from({ length: totalPages }, (_, i) => i + 1);
        }
        
        // Always include current page, two before and two after if possible
        const pages = [];
        
        // Always include page 1
        pages.push(1);
        
        // Add ellipsis if needed
        if (currentPage > 3) {
          pages.push('...');
        }
        
        // Add pages around current page
        const start = Math.max(2, currentPage - 1);
        const end = Math.min(totalPages - 1, currentPage + 1);
        
        for (let i = start; i <= end; i++) {
          pages.push(i);
        }
        
        // Add ellipsis if needed
        if (currentPage < totalPages - 2) {
          pages.push('...');
        }
        
        // Always include last page
        if (totalPages > 1) {
          pages.push(totalPages);
        }
        
        return pages;
      };
      
      const sortedData = getSortedData();

      return (
        <div className="p-6 max-w-6xl mx-auto bg-white rounded-lg shadow-md">
          <h1 className="text-2xl font-bold mb-6 text-gray-800">Invoice Data Extractor</h1>
          
          {/* File Upload Section */}
          <div className="mb-6 p-4 border border-gray-300 rounded-lg">
            <h2 className="text-lg font-semibold mb-3">Upload Invoice Excel File</h2>
            <div className="flex items-center gap-4">
              <label className="block">
                <span className="sr-only">Choose Excel file</span>
                <input 
                  type="file" 
                  accept=".xls,.xlsx" 
                  onChange={handleFileUpload} 
                  className="block w-full text-sm text-gray-500
                    file:mr-4 file:py-2 file:px-4
                    file:rounded-md file:border-0
                    file:text-sm file:font-semibold
                    file:bg-blue-50 file:text-blue-700
                    hover:file:bg-blue-100
                  "
                />
              </label>
              {file && (
                <span className="text-sm text-gray-500">
                  {fileName}
                </span>
              )}
            </div>
          </div>
          
          {/* Processing Indicator */}
          {processing && (
            <div className="mb-4 text-center">
              <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-blue-600 border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
              <p className="mt-2 text-gray-600">Processing file, please wait...</p>
            </div>
          )}
          
          {/* Error Message */}
          {error && (
            <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
              {error}
            </div>
          )}
          
          {/* Copy Data Modal */}
          {showCopyModal && (
            <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 p-4">
              <div className="bg-white rounded-lg max-w-4xl w-full max-h-screen flex flex-col">
                <div className="p-4 border-b">
                  <h2 className="text-lg font-semibold">Copy Data</h2>
                  <p className="text-sm text-gray-600">Press Ctrl+A (or Cmd+A on Mac) to select all, then Ctrl+C (or Cmd+C) to copy</p>
                </div>
                
                <div className="p-4 flex-grow overflow-auto">
                  <textarea 
                    className="w-full h-96 p-2 border border-gray-300 rounded font-mono text-sm"
                    value={generateCopyText()}
                    readOnly
                    onClick={(e) => e.target.select()}
                    autoFocus
                  />
                </div>
                
                <div className="p-4 border-t flex justify-end">
                  <button 
                    className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700"
                    onClick={() => setShowCopyModal(false)}
                  >
                    Close
                  </button>
                </div>
              </div>
            </div>
          )}
          
          {/* Results Section */}
          {invoices.length > 0 && (
            <div className="mt-6">
              <div className="flex justify-between items-center mb-4">
                <div>
                  <h2 className="text-lg font-semibold">Extracted Invoices</h2>
                  <p className="text-sm text-gray-600">
                    Total: {totalInvoiceGroups} invoice groups, {totalInvoiceItems} items
                  </p>
                </div>
                <div className="flex gap-3 items-center">
                  <div className="flex gap-2">
                    <input
                      type="text"
                      placeholder="Filter..."
                      value={filterText}
                      onChange={(e) => setFilterText(e.target.value)}
                      className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <button
                      onClick={() => setFilterText('')}
                      disabled={!filterText}
                      className={`px-2 py-1 border rounded-md text-xs ${
                        !filterText ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-600 hover:bg-gray-100'
                      }`}
                    >
                      Clear
                    </button>
                  </div>
                  <div>
                    <button 
                      onClick={openCopyModal}
                      className="px-4 py-2 bg-green-600 text-white rounded-md text-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
                    >
                      Copy All Data
                    </button>
                  </div>
                </div>
              </div>
              
              {/* Data Table */}
              <div className="overflow-x-auto border border-gray-300 rounded-lg">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      {[
                        { key: 'groupNo', label: 'Group No' },
                        { key: 'docDate', label: 'Doc Date' },
                        { key: 'name', label: 'Name' },
                        { key: 'accountDescription', label: 'Account Description' },
                        { key: 'seq', label: 'Seq' },
                        { key: 'glCode', label: 'GL Code' },
                        { key: 'description', label: 'Description' },
                        { key: 'project', label: 'Project' },
                        { key: 'quantity', label: 'Quantity' },
                        { key: 'uom', label: 'UOM' },
                        { key: 'unitPrice', label: 'Unit Price' },
                        { key: 'amount', label: 'Amount' }
                      ].map(column => (
                        <th
                          key={column.key}
                          onClick={() => requestSort(column.key)}
                          className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                        >
                          <div className="flex items-center">
                            {column.label}
                            {sortConfig.key === column.key && (
                              <span className="ml-1">
                                {sortConfig.direction === 'ascending' ? '▲' : '▼'}
                              </span>
                            )}
                          </div>
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {sortedData
                      .slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)
                      .map((item, index) => (
                      <tr key={index} className="hover:bg-gray-50">
                        <td className="px-3 py-2 whitespace-nowrap text-sm">{item.groupNo}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm">{item.docDate}</td>
                        <td className="px-3 py-2 text-sm max-w-xs truncate">{item.name}</td>
                        <td className="px-3 py-2 text-sm max-w-xs truncate">{item.accountDescription}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm">{item.seq}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm">{item.glCode}</td>
                        <td className="px-3 py-2 text-sm max-w-xs truncate">{item.description}</td>
                        <td className="px-3 py-2 text-sm max-w-xs truncate">{item.project}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm text-right">{item.quantity}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm">{item.uom}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm text-right">{item.unitPrice}</td>
                        <td className="px-3 py-2 whitespace-nowrap text-sm text-right">{item.amount}</td>
                      </tr>
                    ))}
                    {sortedData.length === 0 && (
                      <tr>
                        <td colSpan="12" className="px-3 py-4 text-sm text-center text-gray-500">
                          No matching records found
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
              
              {/* Pagination Controls */}
              {sortedData.length > 0 && (
                <div className="mt-4 flex items-center justify-between">
                  <div className="flex items-center">
                    <span className="text-sm text-gray-700">
                      Showing{' '}
                      <span className="font-medium">{Math.min((currentPage - 1) * itemsPerPage + 1, sortedData.length)}</span>
                      {' to '}
                      <span className="font-medium">{Math.min(currentPage * itemsPerPage, sortedData.length)}</span>
                      {' of '}
                      <span className="font-medium">{sortedData.length}</span>
                      {' entries'}
                    </span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <select
                      value={itemsPerPage}
                      onChange={(e) => {
                        setItemsPerPage(Number(e.target.value));
                        setCurrentPage(1); // Reset to first page when changing items per page
                      }}
                      className="px-2 py-1 border border-gray-300 rounded-md text-sm"
                    >
                      <option value={10}>10 per page</option>
                      <option value={25}>25 per page</option>
                      <option value={50}>50 per page</option>
                      <option value={100}>100 per page</option>
                    </select>
                    
                    <button
                      onClick={() => setCurrentPage(1)}
                      disabled={currentPage === 1}
                      className={`px-2 py-1 border rounded-md text-sm ${
                        currentPage === 1 ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-blue-600 hover:bg-blue-50'
                      }`}
                    >
                      First
                    </button>
                    
                    <button
                      onClick={() => setCurrentPage(currentPage - 1)}
                      disabled={currentPage === 1}
                      className={`px-2 py-1 border rounded-md text-sm ${
                        currentPage === 1 ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-blue-600 hover:bg-blue-50'
                      }`}
                    >
                      Previous
                    </button>
                    
                    <div className="flex items-center space-x-1">
                      {generatePageNumbers().map((pageNum, idx) => (
                        <button
                          key={idx}
                          onClick={() => typeof pageNum === 'number' ? setCurrentPage(pageNum) : null}
                          disabled={pageNum === '...'}
                          className={`px-3 py-1 border rounded-md text-sm ${
                            currentPage === pageNum ? 'bg-blue-600 text-white' : 
                            pageNum === '...' ? 'bg-white text-gray-400 cursor-default' : 
                            'bg-white text-blue-600 hover:bg-blue-50'
                          }`}
                        >
                          {pageNum}
                        </button>
                      ))}
                    </div>
                    
                    <button
                      onClick={() => setCurrentPage(currentPage + 1)}
                      disabled={currentPage === Math.ceil(sortedData.length / itemsPerPage)}
                      className={`px-2 py-1 border rounded-md text-sm ${
                        currentPage === Math.ceil(sortedData.length / itemsPerPage) ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-blue-600 hover:bg-blue-50'
                      }`}
                    >
                      Next
                    </button>
                    
                    <button
                      onClick={() => setCurrentPage(Math.ceil(sortedData.length / itemsPerPage))}
                      disabled={currentPage === Math.ceil(sortedData.length / itemsPerPage)}
                      className={`px-2 py-1 border rounded-md text-sm ${
                        currentPage === Math.ceil(sortedData.length / itemsPerPage) ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-blue-600 hover:bg-blue-50'
                      }`}
                    >
                      Last
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      );
    };
    
    // Render the app
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<InvoiceExtractor />);
  </script>
</body>
</html>
